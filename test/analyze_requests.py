"""
Request Analysis Dashboard
Analyzes the request logs generated by the request logger middleware.
"""

import json
import os
import sys
from datetime import datetime, timedelta
from collections import defaultdict
import argparse

class RequestAnalyzer:
    """Analyzes request logs and provides insights"""
    
    def __init__(self, json_file='request_analysis.json', log_file='request_timings.log'):
        self.json_file = json_file
        self.log_file = log_file
        self.data = None
        self.load_data()
    
    def load_data(self):
        """Load analysis data from JSON file"""
        try:
            if os.path.exists(self.json_file):
                with open(self.json_file, 'r') as f:
                    self.data = json.load(f)
                return True
            else:
                print(f"⚠️  Analysis file {self.json_file} not found. Run some requests first.")
                return False
        except Exception as e:
            print(f"❌ Error loading analysis data: {e}")
            return False
    
    def print_summary(self):
        """Print overall summary statistics"""
        if not self.data:
            return
        
        print("🔍 REQUEST ANALYSIS SUMMARY")
        print("=" * 50)
        
        print(f"📊 Total Requests: {self.data.get('total_requests', 0)}")
        print(f"🐌 Slow Requests (>1s): {self.data.get('slow_requests', 0)} ({self.data.get('slow_request_percentage', 0):.1f}%)")
        print(f"📁 Static File Requests: {self.data.get('static_file_requests', 0)}")
        print(f"⏰ Export Time: {self.data.get('export_timestamp', 'Unknown')}")
        
        error_requests = self.data.get('error_requests', {})
        if error_requests:
            print(f"❌ Error Requests: {sum(error_requests.values())}")
            for code, count in error_requests.items():
                print(f"   - {code}: {count} requests")
        
        print()
    
    def print_slowest_routes(self, limit=10):
        """Print the slowest routes by average response time"""
        if not self.data or 'route_stats' not in self.data:
            return
        
        print("🐌 SLOWEST ROUTES")
        print("=" * 50)
        
        # Sort routes by average time
        routes = self.data['route_stats'].items()
        sorted_routes = sorted(routes, key=lambda x: x[1]['avg_time'], reverse=True)
        
        print(f"{'Route':<30} {'Avg Time':<10} {'Max Time':<10} {'Count':<8} {'Total Time':<12}")
        print("-" * 80)
        
        for route, stats in sorted_routes[:limit]:
            avg_time = stats['avg_time']
            max_time = stats['max_time']
            count = stats['count']
            total_time = stats['total_time']
            
            # Highlight slow routes
            prefix = "🔥" if avg_time > 1.0 else "⚡" if avg_time < 0.1 else "  "
            
            print(f"{prefix}{route:<28} {avg_time:<10.3f} {max_time:<10.3f} {count:<8} {total_time:<12.3f}")
        
        print()
    
    def print_most_frequent_routes(self, limit=10):
        """Print the most frequently accessed routes"""
        if not self.data or 'route_stats' not in self.data:
            return
        
        print("📈 MOST FREQUENT ROUTES")
        print("=" * 50)
        
        # Sort routes by request count
        routes = self.data['route_stats'].items()
        sorted_routes = sorted(routes, key=lambda x: x[1]['count'], reverse=True)
        
        print(f"{'Route':<30} {'Count':<8} {'Avg Time':<10} {'Total Time':<12} {'%':<6}")
        print("-" * 76)
        
        total_requests = self.data.get('total_requests', 1)
        
        for route, stats in sorted_routes[:limit]:
            count = stats['count']
            avg_time = stats['avg_time']
            total_time = stats['total_time']
            percentage = (count / total_requests) * 100
            
            print(f"{route:<30} {count:<8} {avg_time:<10.3f} {total_time:<12.3f} {percentage:<6.1f}")
        
        print()
    
    def print_performance_insights(self):
        """Print performance insights and recommendations"""
        if not self.data:
            return
        
        print("💡 PERFORMANCE INSIGHTS")
        print("=" * 50)
        
        insights = []
        
        # Check for slow requests
        slow_pct = self.data.get('slow_request_percentage', 0)
        if slow_pct > 10:
            insights.append(f"🔥 HIGH: {slow_pct:.1f}% of requests are slow (>1s)")
        elif slow_pct > 5:
            insights.append(f"⚠️  MEDIUM: {slow_pct:.1f}% of requests are slow (>1s)")
        else:
            insights.append(f"✅ GOOD: Only {slow_pct:.1f}% of requests are slow")
        
        # Check for static file serving
        static_requests = self.data.get('static_file_requests', 0)
        if static_requests > 0:
            insights.append(f"⚠️  Flask is serving {static_requests} static files - use nginx/CDN")
        
        # Check route distribution
        route_stats = self.data.get('route_stats', {})
        if route_stats:
            # Find routes with high average time
            slow_routes = [
                route for route, stats in route_stats.items()
                if stats['avg_time'] > 0.5 and stats['count'] > 5
            ]
            if slow_routes:
                insights.append(f"🐌 {len(slow_routes)} routes consistently slow: {', '.join(slow_routes[:3])}")
            
            # Find routes with high frequency
            busy_routes = [
                route for route, stats in route_stats.items()
                if stats['count'] > (self.data.get('total_requests', 0) * 0.1)
            ]
            if busy_routes:
                insights.append(f"📈 High traffic routes (consider caching): {', '.join(busy_routes[:3])}")
        
        # Error rate analysis
        error_requests = self.data.get('error_requests', {})
        if error_requests:
            total_errors = sum(error_requests.values())
            error_rate = (total_errors / self.data.get('total_requests', 1)) * 100
            if error_rate > 5:
                insights.append(f"❌ HIGH error rate: {error_rate:.1f}%")
        
        for insight in insights:
            print(f"  {insight}")
        
        if not insights:
            print("  ✅ No major performance issues detected!")
        
        print()
    
    def print_recommendations(self):
        """Print performance optimization recommendations"""
        if not self.data:
            return
        
        print("🚀 OPTIMIZATION RECOMMENDATIONS")
        print("=" * 50)
        
        recommendations = []
        
        # Database query recommendations
        route_stats = self.data.get('route_stats', {})
        for route, stats in route_stats.items():
            if stats['avg_time'] > 0.5:
                recommendations.append(f"🔍 Optimize {route}: avg {stats['avg_time']:.3f}s")
        
        # Static file recommendations
        if self.data.get('static_file_requests', 0) > 0:
            recommendations.append("📁 Move static files to nginx/CDN (Flask shouldn't serve static files)")
        
        # Caching recommendations
        frequent_routes = sorted(
            route_stats.items(),
            key=lambda x: x[1]['count'],
            reverse=True
        )[:3]
        
        for route, stats in frequent_routes:
            if stats['count'] > 10 and stats['avg_time'] > 0.1:
                recommendations.append(f"💾 Consider caching for {route} ({stats['count']} requests)")
        
        # General recommendations
        if self.data.get('slow_request_percentage', 0) > 5:
            recommendations.append("⚡ Consider database query optimization")
            recommendations.append("🏗️  Review application architecture for bottlenecks")
            recommendations.append("📊 Add database connection pooling if not already configured")
        
        for rec in recommendations[:10]:  # Limit to top 10
            print(f"  {rec}")
        
        if not recommendations:
            print("  🎉 Your application performance looks good!")
        
        print()
    
    def export_csv_report(self, filename='request_analysis_report.csv'):
        """Export detailed analysis to CSV"""
        if not self.data or 'route_stats' not in self.data:
            print("❌ No data available for CSV export")
            return
        
        try:
            import csv
            with open(filename, 'w', newline='') as csvfile:
                fieldnames = ['route', 'count', 'avg_time', 'max_time', 'min_time', 'total_time']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for route, stats in self.data['route_stats'].items():
                    writer.writerow({
                        'route': route,
                        'count': stats['count'],
                        'avg_time': stats['avg_time'],
                        'max_time': stats['max_time'],
                        'min_time': stats['min_time'],
                        'total_time': stats['total_time']
                    })
            
            print(f"📄 CSV report exported to {filename}")
        
        except Exception as e:
            print(f"❌ Error exporting CSV: {e}")

def main():
    """Main analysis function"""
    parser = argparse.ArgumentParser(description='Analyze Flask request logs')
    parser.add_argument('--json-file', default='request_analysis.json',
                        help='JSON file with analysis data')
    parser.add_argument('--log-file', default='request_timings.log',
                        help='Log file with detailed request logs')
    parser.add_argument('--limit', type=int, default=10,
                        help='Limit for top routes display')
    parser.add_argument('--csv', action='store_true',
                        help='Export CSV report')
    
    args = parser.parse_args()
    
    analyzer = RequestAnalyzer(args.json_file, args.log_file)
    
    if analyzer.data:
        analyzer.print_summary()
        analyzer.print_slowest_routes(args.limit)
        analyzer.print_most_frequent_routes(args.limit)
        analyzer.print_performance_insights()
        analyzer.print_recommendations()
        
        if args.csv:
            analyzer.export_csv_report()
    else:
        print("📋 TO GET STARTED:")
        print("1. Integrate the request logger with your Flask app")
        print("2. Run some requests to generate data")
        print("3. Run this script again to see the analysis")

if __name__ == '__main__':
    main()